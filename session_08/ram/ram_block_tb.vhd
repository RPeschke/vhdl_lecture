-- XGEN: Autogenerated File

library IEEE;
library UNISIM;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use UNISIM.VComponents.all;
use ieee.std_logic_unsigned.all;
use work.argg_hdl_core.all;
use work.ramHandle_pack.all;
use work.slv32_a_pack.all;


entity ram_block_tb is 
end entity;



architecture rtl of ram_block_tb is

--------------------------ram_block_tb-----------------
--------------------------clkg-----------------
  signal clkg_clk : std_logic := '0'; 
-------------------------- end clkg-----------------
--------------------------ramB-----------------
  signal ramB_ReadAddr : std_logic_vector(31 downto 0) := (others => '0'); 
  signal ramB_ReadData : std_logic_vector(31 downto 0) := (others => '0'); 
  signal ramB_clk : std_logic := '0'; 
  signal ramB_wAddr : std_logic_vector(31 downto 0) := (others => '0'); 
  signal ramB_wData : std_logic_vector(31 downto 0) := (others => '0'); 
  signal ramB_we : std_logic := '0'; 
-------------------------- end ramB-----------------
  signal dataOut : std_logic_vector(31 downto 0) := (others => '0'); 
  signal counter3 : std_logic_vector(31 downto 0) := (others => '0'); 
  signal counter2 : std_logic_vector(31 downto 0) := (others => '0'); 
  signal count : std_logic_vector(31 downto 0) := (others => '0'); 
  signal addrCounter : std_logic_vector(31 downto 0) := (others => '0'); 
-------------------------- end ram_block_tb-----------------

begin
  -- begin architecture
  
-----------------------------------
proc : process(clkg_clk) is
  begin
    if rising_edge(clkg_clk) then 
  count <= count + 1;
    end if;
  
  end process;
  
-----------------------------------
proc1 : process(clkg_clk) is
  variable ramH : ramHandle := ramHandle_null;
  begin
    if rising_edge(clkg_clk) then 
  
      if (count > 10) then 
        set_data_011(self => ramH, data => counter2, addr => counter2);
        counter2 <= counter2 + 1;
        
      end if;
    
      if (counter2 > 90) then 
        counter2 <=  (others => '0');
        
      end if;
    end if;
  
  end process;
  
-----------------------------------
proc2 : process(clkg_clk) is
  begin
    if rising_edge(clkg_clk) then 
  ramB_we <= '0';
    
      if (count > 10) then 
        ramB_we <= '1';
        ramB_wAddr <= counter2;
        ramB_wData <= count;
        counter3 <= counter3 + 1;
        
      end if;
    
      if (counter3 > 90) then 
        counter3 <=  (others => '0');
        
      end if;
    
      if (counter3 > 50) then 
        ramB_ReadAddr <= addrCounter;
        addrCounter <= addrCounter + 1;
        dataOut <= ramB_ReadData;
        
      end if;
    
      if (addrCounter > 90) then 
        addrCounter <=  (others => '0');
        
      end if;
    end if;
  
  end process;
  -- end architecture

  clkg : entity work.clk_gen port map (
    clk => clkg_clk
  );
  
  ramB : entity work.ramBlock port map (
    ReadAddr => ramB_ReadAddr,
    ReadData => ramB_ReadData,
    clk => ramB_clk,
    wAddr => ramB_wAddr,
    wData => ramB_wData,
    we => ramB_we
  );
  ramB_clk <= clkg_clk;
  
end architecture;