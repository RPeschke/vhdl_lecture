-- XGEN: Autogenerated File

library IEEE;
library UNISIM;
  use IEEE.numeric_std.all;
  use IEEE.std_logic_1164.all;
  use UNISIM.VComponents.all;
  use work.zerosupression_p.all;


package xgen_axiStream_zerosupression is 

  -------------------------------------------------------------------------
  ------- Start Psuedo Class axisStream_zerosupression -------------------------

  type axisStream_zerosupression_m2s is record 
    last : std_logic; 
    valid : std_logic; 
    data : zerosupression; 
  end record;


  constant axisStream_zerosupression_m2s_null : axisStream_zerosupression_m2s:= (
    last => '0',
    valid => '0',
    data => zerosupression_null
  );


  type axisStream_zerosupression_m2s_a is array (natural range <>) of axisStream_zerosupression_m2s;




  type axisStream_zerosupression_s2m is record 
    ready : std_logic; 
  end record;


  constant axisStream_zerosupression_s2m_null : axisStream_zerosupression_s2m:= (
    ready => '0'
  );


  type axisStream_zerosupression_s2m_a is array (natural range <>) of axisStream_zerosupression_s2m;




  type axisStream_zerosupression is record 
    last : std_logic; 
    ready : std_logic; 
    valid : std_logic; 
    data : zerosupression; 
  end record;


  constant axisStream_zerosupression_null : axisStream_zerosupression:= (
    last => '0',
    ready => '0',
    valid => '0',
    data => zerosupression_null
  );


  type axisStream_zerosupression_a is array (natural range <>) of axisStream_zerosupression;

  procedure push ( self : inout axisStream_zerosupression; signal dataOut :  out axisStream_zerosupression_m2s);
  procedure pull ( self : inout axisStream_zerosupression;  signal ready :  in  std_logic);
  procedure pull_rev ( self : inout axisStream_zerosupression; signal dataIn :  in axisStream_zerosupression_m2s);
  procedure pull ( self : inout axisStream_zerosupression; signal dataIn :  in axisStream_zerosupression_s2m);
  procedure push_rev ( self : inout axisStream_zerosupression; signal dataOut :  out axisStream_zerosupression_s2m);
  procedure pull_rev ( self : inout axisStream_zerosupression;  signal valid :  in  std_logic; signal last :  in  std_logic; signal data :  in  zerosupression);
  procedure push_rev ( self : inout axisStream_zerosupression;  signal ready :  out  std_logic);
  procedure push ( self : inout axisStream_zerosupression;  signal valid :  out  std_logic; signal last :  out  std_logic; signal data :  out  zerosupression);
  ------- End Psuedo Class axisStream_zerosupression -------------------------
  -------------------------------------------------------------------------


  -------------------------------------------------------------------------
  ------- Start Psuedo Class axisStream_zerosupression_slave -------------------------

  type axisStream_zerosupression_slave is record 
    data_internal_isvalid2 : std_logic; 
    rx : axisStream_zerosupression; 
    data_internal_was_read2 : std_logic; 
    data_internal2 : zerosupression; 
    data_isvalid : std_logic; 
    data_internal_isLast2 : std_logic; 
  end record;


  constant axisStream_zerosupression_slave_null : axisStream_zerosupression_slave:= (
    data_internal_isvalid2 => '0',
    rx => axisStream_zerosupression_null,
    data_internal_was_read2 => '0',
    data_internal2 => zerosupression_null,
    data_isvalid => '0',
    data_internal_isLast2 => '0'
  );


  type axisStream_zerosupression_slave_a is array (natural range <>) of axisStream_zerosupression_slave;

  procedure read_data ( self : inout axisStream_zerosupression_slave; datain : out zerosupression);
  function IsEndOfStream (   self : axisStream_zerosupression_slave) return boolean;
  procedure push ( self : inout axisStream_zerosupression_slave;  signal rx :  out  axisStream_zerosupression_s2m);
  function isReceivingData (   self : axisStream_zerosupression_slave) return boolean;
  procedure pull ( self : inout axisStream_zerosupression_slave;  signal rx :  in  axisStream_zerosupression_m2s);
  procedure pull (self : inout axisStream_zerosupression_slave_a; signal rx :  in  axisStream_zerosupression_m2s_a);
  procedure push (self : inout axisStream_zerosupression_slave_a; signal rx :  out  axisStream_zerosupression_s2m_a);
  procedure observe_data ( self : inout axisStream_zerosupression_slave; datain : out zerosupression);
  ------- End Psuedo Class axisStream_zerosupression_slave -------------------------
  -------------------------------------------------------------------------


  -------------------------------------------------------------------------
  ------- Start Psuedo Class axisStream_zerosupression_master -------------------------

  type axisStream_zerosupression_master is record 
    tx : axisStream_zerosupression; 
  end record;


  constant axisStream_zerosupression_master_null : axisStream_zerosupression_master:= (
    tx => axisStream_zerosupression_null
  );


  type axisStream_zerosupression_master_a is array (natural range <>) of axisStream_zerosupression_master;

  procedure Send_end_Of_Stream ( self : inout axisStream_zerosupression_master; EndOfStream : in boolean := true);
  procedure pull ( self : inout axisStream_zerosupression_master;  signal tx :  in  axisStream_zerosupression_s2m);
  function ready_to_send (   self : axisStream_zerosupression_master) return boolean;
  procedure send_data ( self : inout axisStream_zerosupression_master; datain : in zerosupression);
  procedure pull (self : inout axisStream_zerosupression_master_a; signal tx :  in  axisStream_zerosupression_s2m_a);
  procedure push (self : inout axisStream_zerosupression_master_a; signal tx :  out  axisStream_zerosupression_m2s_a);
  procedure push ( self : inout axisStream_zerosupression_master;  signal tx :  out  axisStream_zerosupression_m2s);
  ------- End Psuedo Class axisStream_zerosupression_master -------------------------
  -------------------------------------------------------------------------


  -------------------------------------------------------------------------
  ------- Start Psuedo Class axisStream_zerosupression_master_with_counter -------------------------

  type axisStream_zerosupression_master_with_counter is record 
    Counter : integer; 
    AxiTX : axisStream_zerosupression_master; 
    EndOfStream : std_logic; 
    SendingData : std_logic; 
    EOF_Counter_max : integer; 
  end record;


  constant axisStream_zerosupression_master_with_counter_null : axisStream_zerosupression_master_with_counter:= (
    Counter => 0,
    AxiTX => axisStream_zerosupression_master_null,
    EndOfStream => '0',
    SendingData => '0',
    EOF_Counter_max => 0
  );


  type axisStream_zerosupression_master_with_counter_a is array (natural range <>) of axisStream_zerosupression_master_with_counter;

  procedure Send_end_Of_Stream ( self : inout axisStream_zerosupression_master_with_counter; EndOfStream : in boolean := true);
  procedure send_data_begining_at ( self : inout axisStream_zerosupression_master_with_counter; position : integer ;  datain : in zerosupression);
  procedure pull ( self : inout axisStream_zerosupression_master_with_counter;    signal tx :  in  axisStream_zerosupression_s2m);
  procedure send_data_at ( self : inout axisStream_zerosupression_master_with_counter; position : integer ;  datain : in zerosupression);
  function ready_to_send (   self : axisStream_zerosupression_master_with_counter) return boolean;
  procedure send_data ( self : inout axisStream_zerosupression_master_with_counter; datain : in zerosupression);
  function ready_to_send_begining_at (   self : axisStream_zerosupression_master_with_counter; position : integer) return boolean;
  procedure push ( self : inout axisStream_zerosupression_master_with_counter;    signal tx :  out  axisStream_zerosupression_m2s);
  function ready_to_send_at_pos (   self : axisStream_zerosupression_master_with_counter; position : integer) return boolean;
  ------- End Psuedo Class axisStream_zerosupression_master_with_counter -------------------------
  -------------------------------------------------------------------------


end xgen_axiStream_zerosupression;


package body xgen_axiStream_zerosupression is

  -------------------------------------------------------------------------
  ------- Start Psuedo Class axisStream_zerosupression -------------------------
  procedure push (  self : inout axisStream_zerosupression; signal dataOut :  out axisStream_zerosupression_m2s) is

  begin 


    -- Start Connecting

    dataOut.valid <=  self.valid;
    dataOut.last <=  self.last;
    dataOut.data <=  self.data;

    -- End Connecting


  end procedure;

  procedure pull (  self : inout axisStream_zerosupression;  signal ready :  in  std_logic) is

  begin 


    -- Start Connecting

    self.ready := ready;

    -- End Connecting


  end procedure;

  procedure pull_rev (  self : inout axisStream_zerosupression; signal dataIn :  in axisStream_zerosupression_m2s) is

  begin 


    -- Start Connecting

    self.valid := dataIn.valid;
    self.last := dataIn.last;
    self.data := dataIn.data;

    -- End Connecting


  end procedure;

  procedure pull (  self : inout axisStream_zerosupression; signal dataIn :  in axisStream_zerosupression_s2m) is

  begin 


    -- Start Connecting

    self.ready := dataIn.ready;

    -- End Connecting


  end procedure;

  procedure push_rev (  self : inout axisStream_zerosupression; signal dataOut :  out axisStream_zerosupression_s2m) is

  begin 


    -- Start Connecting

    dataOut.ready <=  self.ready;

    -- End Connecting


  end procedure;

  procedure pull_rev (  self : inout axisStream_zerosupression;  signal valid :  in  std_logic; signal last :  in  std_logic; signal data :  in  zerosupression) is

  begin 


    -- Start Connecting

    self.valid := valid;
    self.last := last;
    self.data := data;

    -- End Connecting


  end procedure;

  procedure push_rev (  self : inout axisStream_zerosupression;  signal ready :  out  std_logic) is

  begin 


    -- Start Connecting

    ready <=  self.ready;

    -- End Connecting


  end procedure;

  procedure push (  self : inout axisStream_zerosupression;  signal valid :  out  std_logic; signal last :  out  std_logic; signal data :  out  zerosupression) is

  begin 


    -- Start Connecting

    valid <=  self.valid;
    last <=  self.last;
    data <=  self.data;

    -- End Connecting


  end procedure;

  ------- End Psuedo Class axisStream_zerosupression -------------------------
  -------------------------------------------------------------------------


  -------------------------------------------------------------------------
  ------- Start Psuedo Class axisStream_zerosupression_slave -------------------------
  procedure read_data (  self : inout axisStream_zerosupression_slave; datain : out zerosupression) is

  begin 

    if(self.data_internal_isvalid2 = '1') then
      datain := self.data_internal2;
      self.data_internal_was_read2 :='1';
    end if;

  end procedure;

  function IsEndOfStream (   self : axisStream_zerosupression_slave) return boolean is

  begin 

    return  self.data_internal_isvalid2 = '1' and  self.data_internal_isLast2 = '1';

  end function;

  procedure push (  self : inout axisStream_zerosupression_slave;  signal rx :  out  axisStream_zerosupression_s2m) is

  begin 


    if (self.data_internal_was_read2 = '1'   ) then
      self.data_internal_isvalid2 := '0';
    end if;


    if (self.data_isvalid = '0'   and self.data_internal_isvalid2 = '0' ) then 
      self.rx.ready := '1';
    end if;

    -- Start Connecting

    push_rev( self.rx, rx);

    -- End Connecting


  end procedure;

  function isReceivingData (   self : axisStream_zerosupression_slave) return boolean is

  begin 

    return  self.data_internal_isvalid2 = '1' ;

  end function;

  procedure pull (  self : inout axisStream_zerosupression_slave;  signal rx :  in  axisStream_zerosupression_m2s) is

  begin 


    -- Start Connecting

    pull_rev( self.rx, rx);

    -- End Connecting

    if( self.rx.ready = '1'  and self.rx.valid ='1') then 
      self.data_isvalid := '1';
    end if;

    self.data_internal_was_read2 := '0';
    self.rx.ready := '0';


    if (self.data_isvalid ='1' and  self.data_internal_isvalid2 = '0') then
      self.data_internal2:= self.rx.data ;
      self.data_internal_isvalid2 := self.data_isvalid;
      self.data_internal_isLast2 := self.rx.last;
      self.data_isvalid:='0';

    end if;


  end procedure;

  procedure pull ( self : inout axisStream_zerosupression_slave_a; signal rx :  in  axisStream_zerosupression_m2s_a) is

  begin 

    for i in 0 to self'length - 1 loop
      pull(self(i) , rx(i));
    end loop;

  end procedure;

  procedure push ( self : inout axisStream_zerosupression_slave_a; signal rx :  out  axisStream_zerosupression_s2m_a) is

  begin 

    for i in 0 to self'length - 1 loop
      push(self(i) , rx(i));
    end loop;

  end procedure;

  procedure observe_data (  self : inout axisStream_zerosupression_slave; datain : out zerosupression) is

  begin 

    if(self.data_internal_isvalid2 = '1') then
      datain := self.data_internal2;
    end if;

  end procedure;

  ------- End Psuedo Class axisStream_zerosupression_slave -------------------------
  -------------------------------------------------------------------------


  -------------------------------------------------------------------------
  ------- Start Psuedo Class axisStream_zerosupression_master -------------------------
  procedure Send_end_Of_Stream (  self : inout axisStream_zerosupression_master; EndOfStream : in boolean := true) is

  begin 

    if EndOfStream then 
      self.tx.last := '1';
    else 
      self.tx.last := '0';
    end if; 

  end procedure;

  procedure pull (  self : inout axisStream_zerosupression_master;  signal tx :  in  axisStream_zerosupression_s2m) is

  begin 


    -- Start Connecting

    pull( self.tx, tx);

    -- End Connecting

    if (self.tx.ready = '1') then 
      self.tx.valid   := '0'; 
      self.tx.last := '0';  
      self.tx.data := zerosupression_null;
    end if;


  end procedure;

  function ready_to_send (   self : axisStream_zerosupression_master) return boolean is

  begin 

    return self.tx.valid = '0';

  end function;

  procedure send_data (  self : inout axisStream_zerosupression_master; datain : in zerosupression) is

  begin 

    self.tx.valid   := '1';
    self.tx.data    := datain; 

  end procedure;

  procedure pull ( self : inout axisStream_zerosupression_master_a; signal tx :  in  axisStream_zerosupression_s2m_a) is

  begin 

    for i in 0 to self'length - 1 loop
      pull(self(i) , tx(i));
    end loop;

  end procedure;

  procedure push ( self : inout axisStream_zerosupression_master_a; signal tx :  out  axisStream_zerosupression_m2s_a) is

  begin 

    for i in 0 to self'length - 1 loop
      push(self(i) , tx(i));
    end loop;

  end procedure;

  procedure push (  self : inout axisStream_zerosupression_master;  signal tx :  out  axisStream_zerosupression_m2s) is

  begin 


    -- Start Connecting

    push( self.tx, tx);

    -- End Connecting


  end procedure;

  ------- End Psuedo Class axisStream_zerosupression_master -------------------------
  -------------------------------------------------------------------------


  -------------------------------------------------------------------------
  ------- Start Psuedo Class axisStream_zerosupression_master_with_counter -------------------------
  procedure Send_end_Of_Stream (  self : inout axisStream_zerosupression_master_with_counter; EndOfStream : in boolean := true) is

  begin 

    if EndOfStream then
      self.EndOfStream := '1';
    else
      self.EndOfStream := '0';
    end if;



  end procedure;

  procedure send_data_begining_at (  self : inout axisStream_zerosupression_master_with_counter; position : integer ;  datain : in zerosupression) is

  begin 

    if ready_to_send_begining_at(self,position) then
      send_data(self, datain);
    end if;

    if position < self.EOF_Counter_max then
      self.EOF_Counter_max := position;
    end if;

  end procedure;

  procedure pull (  self : inout axisStream_zerosupression_master_with_counter;    signal tx :  in  axisStream_zerosupression_s2m) is

  begin 


    -- Start Connecting

    pull( self.AxiTX,   tx );

    -- End Connecting


  end procedure;

  procedure send_data_at (  self : inout axisStream_zerosupression_master_with_counter; position : integer ;  datain : in zerosupression) is

  begin 

    if ready_to_send_at_pos(self, position) then
      send_data(self, datain);
    end if;

    if position < self.EOF_Counter_max then
      self.EOF_Counter_max := position;
    end if;

  end procedure;

  function ready_to_send (   self : axisStream_zerosupression_master_with_counter) return boolean is

  begin 

    return ready_to_send(self.AxiTX); 

  end function;

  procedure send_data (  self : inout axisStream_zerosupression_master_with_counter; datain : in zerosupression) is

  begin 

    if ready_to_send(self) then
      send_data(self.AxiTX,datain);
      self.SendingData := '1';
    end if;

  end procedure;

  function ready_to_send_begining_at (   self : axisStream_zerosupression_master_with_counter; position : integer) return boolean is

  begin 

    if self.counter >= position  then
      return ready_to_send(self); 
    end if;
    return false;

  end function;

  procedure push (  self : inout axisStream_zerosupression_master_with_counter;    signal tx :  out  axisStream_zerosupression_m2s) is

  begin 


    if self.SendingData = '1' then
      self.counter := self.counter + 1;
    end if;

    if self.SendingData = '1' and self.counter = 0 and self.EndOfStream ='1' then

      Send_end_Of_Stream(self.AxiTX);
      self.EndOfStream :='0';

    elsif  self.SendingData = '1' and self.counter > 0 and self.EndOfStream ='1' then
      self.counter := self.EOF_Counter_max;
    end if;

    self.SendingData := '0';

    -- Start Connecting

    push( self.AxiTX,   tx );

    -- End Connecting


  end procedure;

  function ready_to_send_at_pos (   self : axisStream_zerosupression_master_with_counter; position : integer) return boolean is

  begin 

    if self.counter = position then
      return ready_to_send(self); 
    end if;

    return false;

  end function;

  ------- End Psuedo Class axisStream_zerosupression_master_with_counter -------------------------
  -------------------------------------------------------------------------


end xgen_axiStream_zerosupression;